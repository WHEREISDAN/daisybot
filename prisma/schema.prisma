generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id               String          @id
  name             String
  prefix           String          @default("!")
  welcomeChannelId String?
  logChannelId     String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  autoRoles        String[]
  serverProfiles   ServerProfile[]
  reactionRoles    ReactionRole[]
  autoMod          AutoMod?
  logConfig        LogConfig?
}

model User {
  id             String          @id
  globalProfile  GlobalProfile?
  serverProfiles ServerProfile[]
}

model GlobalProfile {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  xp         Int      @default(0)
  level      Int      @default(1)
  currency   Int      @default(0)
  bio        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  kicks      Int      @default(0)
  bans       Int      @default(0)
  warns      Int      @default(0)
  mutes      Int      @default(0)
  reputation Json     @default("[]")
}

model ServerProfile {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  guildId   String
  guild     Guild    @relation(fields: [guildId], references: [id])
  xp        Int      @default(0)
  level     Int      @default(1)
  nickname  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, guildId])
}

model ReactionRole {
  id        String   @id @default(cuid())
  guildId   String
  messageId String
  roleId    String
  emoji     String
  guild     Guild    @relation(fields: [guildId], references: [id])

  @@unique([guildId, messageId, roleId])
}

model AutoMod {
  id                    String  @id @default(cuid())
  guild                 Guild   @relation(fields: [guildId], references: [id])
  guildId               String  @unique
  enabled               Boolean @default(false)
  logChannelId          String?
  profanityFilterEnabled Boolean @default(false)
  profanityWordList     String[]
  spamDetectionEnabled  Boolean @default(false)
  maxMessagesPerMinute  Int     @default(5)
  inviteLinkDetectionEnabled Boolean @default(false)
  allowedInvites        String[]
  capsDetectionEnabled  Boolean @default(false)
  maxCapsPercentage     Int     @default(70)
  mentionLimitEnabled   Boolean @default(false)
  maxMentionsPerMessage Int     @default(5)
  emojiLimitEnabled     Boolean @default(false)
  maxEmojisPerMessage   Int     @default(10)
  phishingDetectionEnabled Boolean @default(false)
  punishmentLadder      Json    @default("[]") // Store as JSON array of actions
}

model LogConfig {
  id                           String  @id @default(cuid())
  guildId                      String  @unique
  guild                        Guild   @relation(fields: [guildId], references: [id])
  warns                        Boolean @default(false)
  messageDelete                Boolean @default(false)
  messageUpdate                Boolean @default(false)
  messageBulkDelete            Boolean @default(false)
  messageReactionAdd           Boolean @default(false)
  messageReactionRemove        Boolean @default(false)
  messageReactionRemoveAll     Boolean @default(false)
  messageReactionRemoveEmoji   Boolean @default(false)
  channelCreate                Boolean @default(false)
  channelDelete                Boolean @default(false)
  channelUpdate                Boolean @default(false)
  channelPinsUpdate            Boolean @default(false)
  guildMemberAdd               Boolean @default(false)
  guildMemberRemove            Boolean @default(false)
  guildMemberUpdate            Boolean @default(false)
  guildBanAdd                  Boolean @default(false)
  guildBanRemove               Boolean @default(false)
  guildRoleCreate              Boolean @default(false)
  guildRoleDelete              Boolean @default(false)
  guildRoleUpdate              Boolean @default(false)
  guildEmojisUpdate            Boolean @default(false)
  guildInviteCreate            Boolean @default(false)
  guildInviteDelete            Boolean @default(false)
  guildWebhooksUpdate          Boolean @default(false)
  guildUpdate                  Boolean @default(false)
}